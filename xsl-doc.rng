<grammar
    xmlns="http://relaxng.org/ns/structure/1.0"
    datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
    xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
    xmlns:sch="http://purl.oclc.org/dsdl/schematron"
    xmlns:sqf="http://www.schematron-quickfix.com/validator/process"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    ns="http://max.terpstra.ca/ns/xsl-doc"
>
	<sch:ns prefix="xsl" uri="http://www.w3.org/1999/XSL/Transform"/>
	<sch:ns prefix="xd" uri="http://max.terpstra.ca/ns/xsl-doc"/>
	<sch:ns prefix="fn" uri="http://www.w3.org/2005/xpath-functions"/>

	<start>
		<choice>
			<ref name="non-xsl-surround"/>
			<ref name="xsl-root"/>
			<ref name="non-xd"/>
		</choice>
	</start>

	<define name="non-xsl-surround">
		<!-- xd:* and xsl:* may be embedded in arbitrary XML -->
		<element>
			<anyName>
				<except>
					<nsName/>
					<nsName ns="http://www.w3.org/1999/XSL/Transform"/>
				</except>
			</anyName>
			<ref name="any.attrs"/>
			<mixed>
				<zeroOrMore>
					<choice>
						<ref name="non-xsl-surround"/>
						<ref name="xsl-root"/>
						<!-- can use xd:doc outside xsl to describe the xsl root -->
						<ref name="doc"/>
					</choice>
				</zeroOrMore>
			</mixed>
		</element>
	</define>
	
	<define name="xsl-root">
		<!-- majority of xd:* appear inside the xsl root element -->
		<element>
			<choice>
				<name ns="http://www.w3.org/1999/XSL/Transform">transform</name>
				<name ns="http://www.w3.org/1999/XSL/Transform">stylesheet</name>
				<name ns="http://www.w3.org/1999/XSL/Transform">package</name>
			</choice>
			<ref name="any.attrs"/>
			<mixed>
				<zeroOrMore>
					<choice>
						<ref name="non-xd"/>
						<ref name="xd.class"/>
						<element name="xsl:use-package">
							<!-- can also use xd:doc to describe overrided components -->
							<ref name="any.attrs"/>
							<zeroOrMore>
								<choice>
									<text/>
									<ref name="non-xd"/>
									<element name="xsl:override">
										<ref name="any.attrs"/>
										<zeroOrMore>
											<choice>
												<text/>
												<ref name="non-xd"/>
												<ref name="doc"/>
											</choice>
										</zeroOrMore>
									</element>
								</choice>
							</zeroOrMore>
						</element>
					</choice>
				</zeroOrMore>
			</mixed>
		</element>
	</define>
	
	<define name="non-xd">
		<element>
			<anyName>
				<except>
					<nsName/>
				</except>
			</anyName>
			<ref name="any.attrs"/>
			<mixed>
				<zeroOrMore>
					<ref name="non-xd"/>
				</zeroOrMore>
			</mixed>
		</element>
	</define>			
	
	<define name="any.attrs">
		<zeroOrMore>
			<attribute>
				<anyName>
					<except>
						<nsName/>
					</except>
				</anyName>
			</attribute>
		</zeroOrMore>
	</define>
	
	<define name="xd.class" combine="choice">
		<choice>
			<ref name="define"/>
			<ref name="error"/>
			<ref name="resource"/>
			<ref name="doc"/>
		</choice>		
	</define>
	
	<sch:pattern>
		<sch:title>Documentation element placement</sch:title>
		<sch:rule context="xd:doc[empty(@scope) or @scope='component']">
			<sch:assert test="exists(following-sibling::*[1][self::xsl:*])">
				A 'component' scoped xd:doc must be immediately followed
				by the XSL component which it describes.
			</sch:assert>
		</sch:rule>
		<sch:rule context="xd:doc">
			<sch:assert test="exists(
				parent::xsl:*
					[local-name(.) = ('transform', 'stylesheet', 'package')]
			)">
				'package' and 'stylesheet' scoped xd:doc's may only appear as
				a child of xsl:transform, xsl:stylesheet, or xsl:package.
			</sch:assert>
		</sch:rule>
		<sch:rule context="xd:define | xd:error | xd:resource">
			<sch:assert test="exists(
				parent::xsl:*
					[local-name(.) = ('transform', 'stylesheet', 'package')]
			)">
				<sch:name/> may only appear as a child of xsl:transform,
				xsl:stylesheet, or xsl:package.
			</sch:assert>
		</sch:rule>
	</sch:pattern>	

	<!-- ################################################################### -->

	<define name="define">
		<element name="define">
			<a:documentation>describe a data structure, context, or term</a:documentation>
			<attribute name="name">
				<a:document>name this definition can be referenced by</a:document>
				<data type="QName"/>
			</attribute>
			<optional>
				<ref name="as.attr"/>
			</optional>
			<choice>
				<ref name="inline.model"/>
				<interleave>
					<ref name="common.model"/>
					<optional>
						<ref name="map"/>
					</optional>
				</interleave>
			</choice>
		</element>
		<sch:pattern>
			<sch:title>Constraints for xd:define</sch:title>
			<sch:rule context="xd:define">
				<sch:assert test="empty(//xd:define/@name = @name)">
					Defined names (xd:define/@name) must be unique within a file.
				</sch:assert>
			</sch:rule>
		</sch:pattern>
	</define>
	
	<define name="error">
		<element name="error">
			<a:documentation>describe an error code</a:documentation>
			<attribute name="name">
				<a:documentation>QName of the error</a:documentation>
				<data type="QName"/>
			</attribute>
			<choice>
				<ref name="inline.model"/>
				<ref name="common.model"/>
			</choice>
		</element>
		<sch:pattern>
			<sch:title>Constraints for xd:error</sch:title>
			<sch:rule context="xd:error">
				<sch:report test="exists(//xd:error/@name = @name)">
					error-codes should not be documented more than once per file
					(xd:error/@name must be unique).
				</sch:report>
			</sch:rule>
		</sch:pattern>
	</define>
	
	<define name="resource">
		<element name="resource">
			<a:documentation>describe a resource</a:documentation>
			<optional>
				<attribute name="uri">
					<a:documentation>identifier or location</a:documentation>
					<data type="anyURI"/>
				</attribute>
			</optional>
			<choice>
				<ref name="inline.model"/>
				<interleave>
					<ref name="common.model"/>
					<zeroOrMore>
						<element name="produced-by">
							<a:documentation>
								reference to a component that produces this resource
							</a:documentation>
							<optional>
								<ref name="refsheet.attr"/>
							</optional>
							<attribute name="reftype">
								<a:documentation>type of component to reference</a:documentation>
								<choice>
									<value>function</value>
									<value>template</value>
									<!--
										intentionally omitted stylesheet and package;
										use xd:returns/@ref instead
									-->
								</choice>
							</attribute>
							<ref name="ref.attr"/>
							<empty/>
						</element>
					</zeroOrMore>
					<zeroOrMore>
						<element name="used-by">
							<a:documentation>
								reference to a component that uses this resource
							</a:documentation>
							<optional>
								<ref name="refsheet.attr"/>
							</optional>
							<attribute name="reftype">
								<a:documentation>type of component to reference</a:documentation>
								<choice>
									<value>function</value>
									<value>key</value>
									<value>package</value>
									<value>stylesheet</value>
									<value>template</value>
								</choice>
							</attribute>
							<ref name="ref.attr"/>
							<empty/>
						</element>
					</zeroOrMore>
				</interleave>
			</choice>
		</element>
		<sch:pattern>
			<sch:title>Constraints for xd:resource</sch:title>
			<sch:rule context="xd:resource[@uri]">
				<sch:assert test="count(//xd:resource[@uri = current()/@uri]) eq 1">
					Resource URIs (xd:resource/@uri) must be unique within a file.
				</sch:assert>
			</sch:rule>
		</sch:pattern>
		<sch:pattern is-a="redundant-backref" id="redundant-produced-by-function">
			<sch:param name="ref" value="xd:produced-by"/>
			<sch:param name="backref" value="xd:returns"/>
			<sch:param name="type" value="'function'"/>
			<sch:param name="filter" value="
				[
					@name eq (
						if (contains(current()/@ref, '#'))
						then substring-before(current()/@ref, '#')
						else current()/@ref
					)
				]
				[
					if (contains(current()/@ref, '#'))
					then count(xsl:param) eq number(substring-after(current()/@ref, '#'))
					else true()
				]
			"/>
		</sch:pattern>
		<sch:pattern is-a="redundant-backref" id="redundant-produced-by-template">
			<sch:param name="ref" value="xd:produced-by"/>
			<sch:param name="backref" value="xd:returns"/>
			<sch:param name="type" value="'template'"/>
			<sch:param name="filter" value="[@name eq current()/@ref]"/>
		</sch:pattern>
		<sch:pattern is-a="redundant-backref" id="redundant-used-by-function">
			<sch:param name="ref" value="xd:used-by"/>
			<sch:param name="backref" value="xd:param"/>
			<sch:param name="type" value="'function'"/>
			<sch:param name="filter" value="
				[
					@name eq (
						if (contains(current()/@ref, '#'))
						then substring-before(current()/@ref, '#')
						else current()/@ref
					)
				]
				[
					if (contains(current()/@ref, '#'))
					then count(xsl:param) eq number(substring-after(current()/@ref, '#'))
					else true()
				]
			"/>
		</sch:pattern>
		<sch:pattern is-a="redundant-backref" id="redundant-used-by-template">
			<sch:param name="ref" value="xd:used-by"/>
			<sch:param name="backref" value="xd:param"/>
			<sch:param name="type" value="'template'"/>
			<sch:param name="filter" value="[@name eq current()/@ref]"/>
		</sch:pattern>
		<sch:pattern is-a="redundant-backref" id="redundant-used-by-stylesheet">
			<sch:param name="ref" value="xd:used-by"/>
			<sch:param name="backref" value="xd:param"/>
			<sch:param name="type" value="'stylesheet'"/>
			<sch:param name="filter" value="[@id eq current()/@ref]"/>
		</sch:pattern>
		<sch:pattern is-a="redundant-backref" id="redundant-used-by-package">
			<sch:param name="ref" value="xd:used-by"/>
			<sch:param name="backref" value="xd:param"/>
			<sch:param name="type" value="'package'"/>
			<sch:param name="filter" value="[@uri eq current()/@ref]"/>
		</sch:pattern>
	</define>
	
	<define name="doc">
		<element name="doc">
			<a:documentation>describe an XSL component</a:documentation>
			<optional>
				<attribute name="scope" a:defaultValue="component">
					<a:documentation>what this documentation applies to</a:documentation>
					<choice>
						<value>component</value>
						<a:documentation>the following XSL component</a:documentation>
						<value>stylesheet</value>
						<a:documentation>the current stylesheet</a:documentation>
						<value>package</value>
						<a:documentation>the current package</a:documentation>
					</choice>
				</attribute>
			</optional>
			<choice>
				<ref name="inline.model"/>
				<ref name="doc.model"/>
			</choice>
		</element>
	</define>

<!-- ####################################################################### -->

	<define name="doc.model" combine="interleave">
		<interleave>
			<ref name="common.model"/>
			<zeroOrMore>
				<element name="param">
					<a:documentation>a parameter for this component</a:documentation>
					<optional>
						<ref name="ref.attr"/>
					</optional>
					<ref name="inline.model"/>
				</element>
			</zeroOrMore>
			<optional>
				<element name="returns">
					<a:documentation>the return value for this component</a:documentation>
					<optional>
						<ref name="ref.attr"/>
					</optional>
					<ref name="inline.model"/>
				</element>
			</optional>
			<zeroOrMore>
				<element name="error">
					<a:documentation>an error this component may raise</a:documentation>
					<optional>
						<ref name="ref.attr"/>
					</optional>
					<ref name="inline.model"/>
				</element>
			</zeroOrMore>
			<optional>
				<element name="context">
					<a:documentation>context this component expects</a:documentation>
					<optional>
						<optional><ref name="refsheet.attr"/></optional>
						<optional>
							<attribute name="reftype" a:defaultValue="define">
								<a:documentation>type of component to reference</a:documentation>
								<choice>
									<value>define</value>
									<value>error</value>
									<value>param</value>
									<value>resource</value>
								</choice>
							</attribute>
						</optional>
						<ref name="ref.attr"/>
					</optional>
					<ref name="inline.model"/>
				</element>
			</optional>
			<optional>
				<element name="deprecated">
					<a:documentation>mark this component as obsolete</a:documentation>
					<empty/>
				</element>
			</optional>
			<zeroOrMore>
				<element name="author">
					<a:documentation>author of this component</a:documentation>
					<ref name="inline.model"/>
				</element>
			</zeroOrMore>
			<zeroOrMore>
				<element name="website">
					<a:documentation>a related website</a:documentation>
					<attribute name="href">
						<a:documentation>URL of the website</a:documentation>
						<data type="anyURI"/>
					</attribute>
					<ref name="inline.model"/>
				</element>
			</zeroOrMore>
			<zeroOrMore>
				<element name="bugs">
					<a:documentation>where to report bugs</a:documentation>
					<attribute name="href">
						<a:documentation>email address or URL to a bug-reporting tool</a:documentation>
						<data type="anyURI"/>
					</attribute>
					<ref name="inline.model"/>
				</element>
			</zeroOrMore>
			<zeroOrMore>
				<element name="license">
					<a:documentation>copyright notice</a:documentation>
					<optional>
						<attribute name="href">
							<a:documentation>link to canonical license text</a:documentation>
							<data type="anyURI"/>
						</attribute>
					</optional>
					<optional>
						<attribute name="name">
							<a:documentation>common license name</a:documentation>
							<choice>
								<value>MIT</value>
								<value>BSD-2-Clause</value>
								<value>BSD-3-Clause</value>
								<value>GPL-3.0</value>
								<value>LGPL-3.0</value>
								<value>MPL-2.0</value>
								<value>CDDL-1.0</value>
								<value>EPL-1.0</value>
								<value>CC0</value>
								<value>Apache-2.0</value>
								<text/>
							</choice>
						</attribute>
					</optional>
					<ref name="inline.model"/>
				</element>
			</zeroOrMore>
		</interleave>
		<sch:pattern>
			<sch:title>Constraints for xd:doc child element applicability</sch:title>
			<sch:let name="rootElements" value="('stylesheet', 'package')"/>
			<sch:rule abstract="true" id="rootContext">
				<sch:assert test="
					parent::xd:doc/@scope = $rootElements
					or
					parent::xd:doc/following-sibling::xsl:*[1]
						[local-name(.) = $rootElements]
				">
					<sch:name/> is only applicable to stylesheets and packages.
				</sch:assert>
			</sch:rule>
			<sch:rule context="xd:website"><sch:extends rule="rootContext"/></sch:rule>
			<sch:rule context="xd:bugs"><sch:extends rule="rootContext"/></sch:rule>
			<sch:rule context="xd:license"><sch:extends rule="rootContext"/></sch:rule>
			<sch:rule context="xd:context">
				<sch:assert test="
					parent::xd:doc/@scope = $rootElements
					or
					parent::xd:doc/following-sibling::xsl:*[1]
						[local-name(.) = ($rootElements, 'key')]
					or
					parent::xd:doc/following-sibling::xsl:*[1]
						[local-name(.) = 'template']
						[exists(@name)]
				">
					xd:context is only applicable to stylesheets, packages,
					named templates, and keys.
				</sch:assert>
			</sch:rule>
			<sch:rule abstract="true" id="runnableContext">
				<sch:assert test="
					parent::xd:doc/@scope = $rootElements
					or
					parent::xd:doc/following-sibling::xsl:*[1]
						[local-name(.) = ($rootElements, 'template', 'function')]
				">
					<sch:name/> is only applicable to stylesheets, packages,
					templates, and functions.
				</sch:assert>
			</sch:rule>
			<sch:rule context="xd:returns"><sch:extends rule="runnableContext"/></sch:rule>
			<sch:rule context="xd:error"><sch:extends rule="runnableContext"/></sch:rule>
			<sch:rule context="xd:param">
				<sch:report test="
					parent::xd:doc/@scope = $rootElements
					or
					parent::xd:doc/following-sibling::xsl:*[1]
						[local-name(.) = $rootElements]
				">
					xd:param should not be used to describe package or
					stylesheet parameters (use xd:doc on xsl:param instead).
				</sch:report>
				<sch:assert test="
					parent::xd:doc/following-sibling::xsl:*[1]
						[local-name(.) = ('template', 'function')]
				">
					xd:param is only applicable to templates and functions.
				</sch:assert>
			</sch:rule>
		</sch:pattern>
	</define>

	<define name="common.model" combine="interleave">
		<interleave>
			<optional>
				<element name="short">
					<a:documentation>short, single sentance descripition</a:documentation>
					<ref name="inline.model"/>
				</element>
			</optional>
			<optional>
				<element name="detail">
					<a:documentation>detailed description</a:documentation>
					<ref name="inline.model"/>
				</element>
			</optional>
			<zeroOrMore>
				<element name="see">
					<a:documentation>link to other documentation</a:documentation>
					<choice>
						<ref name="fullref.attrs"/>
						<attribute name="href">
							<a:documentation>a URL to link to</a:documentation>
							<data type="anyURI"/>
						</attribute>
					</choice>
					<text/>
				</element>
			</zeroOrMore>
		</interleave>
	</define>

	<define name="inline.model">
		<zeroOrMore>
			<ref name="inline.class"/>
		</zeroOrMore>
	</define>
	
	<define name="inline.class" combine="choice">
		<choice>
			<text/>
			<ref name="ref"/>
			<ref name="link"/>
			<element>
				<anyName>
					<except>
						<nsName/>
					</except>
				</anyName>
				<ref name="any.attrs"/>
				<zeroOrMore>
					<ref name="inline.class"/>
				</zeroOrMore>
			</element>
		</choice>
	</define>
	
	<define name="as.attr">
		<attribute name="as">
			<a:documentation>SequenceType of this object</a:documentation>
			<data type="token"/>
		</attribute>
		<sch:pattern>
			<sch:rule context="xd:*[@as]">
				<sch:let name="single" value="
					replace(
						replace(normalize-space(@as), '(\?|\*|\+)$', ''),
						'^\s*\(\s*(.*)\s*\)\s*$',
						'$1'
					)
				"/>
				<sch:assert test="
					$single castable as xs:QName or
					(exists(
						analyze-string($single, '^Q\{\s*([^\{\}]*)\s*\}(.*)$')
							/fn:match
								[fn:group[@nr=1] castable as xs:anyURI]
								[fn:group[@nr=2] castable as xs:NCName]
					)) or
					matches(
						$single,
						'^(empty-sequence|item|comment|namespace-node|text|node)\s*\(\s*\)$'
					) or
					matches($single, '^(document-node|element|attribute|processing-instruction)\s\(.*\)$') or
					matches($single, '^(function|map|array)\s*\(\s*\*\s*\)$') or
					matches($single, '^function\s*\(.*\)\s*as.*$') or
					matches($single, '^schema-(element|attribute)\s*\(.+\)$') or
					matches($single, '^(map|array)\s*\(.*\)$')
				">
					@as must be an XPath SequenceType
				</sch:assert>
			</sch:rule>
		</sch:pattern>
	</define>

	<define name="map">
		<element name="map">
			<a:documentation>describe a map entry</a:documentation>
			<attribute name="key">
				<a:documentation>map key</a:documentation>
			</attribute>
			<optional>
				<attribute name="key-as">
					<a:documentation>atomic type of the key</a:documentation>
					<data type="QName"/>
				</attribute>
			</optional>
			<choice>
				<group>
					<optional>
						<attribute name="value">
							<a:documentation>literal value associated with this key</a:documentation>
						</attribute>
					</optional>
					<optional>
						<ref name="as.attr"/>
					</optional>
					<interleave>
						<optional>
							<ref name="map"/>
						</optional>
						<ref name="inline.model"/>
					</interleave>
				</group>
				<group>
					<optional>
						<ref name="refsheet.attr"/>
					</optional>
					<optional>
						<attribute name="reftype">
							<a:documentation>type of component to reference</a:documentation>
							<choice>
								<value>define</value>
								<value>function</value>
								<value>resource</value>
							</choice>
						</attribute>
					</optional>
					<ref name="ref.attr"/>
				</group>
			</choice>
		</element>
		<sch:pattern>
			<sch:title>Only use xd:map to describe maps</sch:title>
			<sch:rule context="xd:map">
				<sch:report test="
					exists(parent::xd:*/@as) and
					not(starts-with(parent::xd:*/@as, 'map('))
				">
					Use of xd:map is incompatible with context SequenceType
					<sch:value-of select="parent::*/@as"/>.
				</sch:report>
			</sch:rule>
		</sch:pattern>
	</define>

<!-- ####################################################################### -->	

	<define name="ref">
		<element name="ref">
			<a:documentation>linked reference to documentation of another item</a:documentation>
			<choice>
				<attribute name="id">
					<a:documentation>reference an @xml:id</a:documentation>
					<data type="IDREF"/>
				</attribute>
				<group>
					<optional>
						<attribute name="sheet" a:defaultValue=".">
							<a:documentation>stylesheet to look up a reference in</a:documentation>
							<data type="anyURI"/>
						</attribute>
					</optional>
					<optional>
						<attribute name="type" a:defaultValue="define">
							<a:documentation>type of component to reference</a:documentation>
							<ref name="reftype.data"/>
						</attribute>
					</optional>
					<attribute name="name">
						<a:documentation>reference name</a:documentation>
					</attribute>
				</group>
			</choice>
		</element>
	</define>
	
	<define name="link">
		<ref name="ref"/>
	</define>

	<define name="refsheet.attr">
		<attribute name="refsheet" a:defaultValue=".">
			<a:documentation>stylesheet to look up a reference in</a:documentation>
			<data type="anyURI"/>
		</attribute>
	</define>

	<define name="reftype.attr">	
		<attribute name="reftype" a:defaultValue="define">
			<a:documentation>type of component to reference</a:documentation>
			<ref name="reftype.data"/>
		</attribute>
	</define>

	<define name="reftype.data">
		<choice>
			<value>accumulator</value>
			<value>attribute-set</value>
			<value>character-map</value>
			<value>decimal-format</value>
			<value>define</value>
			<value>error</value>
			<value>function</value>
			<value>key</value>
			<value>mode</value>
			<value>output</value>
			<value>package</value>
			<value>param</value>
			<value>resource</value>
			<value>sourceline</value>
			<value>stylesheet</value>
			<value>template</value>
			<value>variable</value>
		</choice>
	</define>
	
	<define name="ref.attr">
		<attribute name="ref">
			<a:documentation>reference name</a:documentation>
		</attribute>
	</define>
	
	<define name="fullref.attrs">
		<optional>
			<ref name="refsheet.attr"/>
		</optional>
		<optional>
			<ref name="reftype.attr"/>
		</optional>
		<ref name="ref.attr"/>
	</define>

	<sch:pattern>
		<sch:title>Reference type syntaxes</sch:title>
		<!-- error -->
		<sch:rule context="*[@reftype eq 'error'] | xd:ref[@type eq 'error']">
			<sch:let name="err" value="(@ref,@name)[1]"/>
			<sch:assert test="$err castable as xs:QName">
				References to errors must be lexical QNames.
			</sch:assert>
			<!-- don't require error references to actually refer to anything -->
		</sch:rule>
		<!-- package -->
		<sch:rule context="*[@reftype eq 'package'] | xd:ref[@type eq 'package']">
			<sch:let name="pkg" value="(@ref,@name)[1]"/>
			<sch:assert test="$pkg eq '.' or resolve-uri($pkg) eq $pkg">
				Package references must be an absolute package name URI, or
				the special value "." to refer to the current package.
			</sch:assert>
			<!-- don't require package references to actually refer to anything -->
		</sch:rule>
		<!-- sourceline -->
		<sch:rule context="*[@reftype eq 'sourceline'] | xd:ref[@type eq 'sourceline']">
			<sch:assert test="(@ref,@name)[1] castable as xs:nonNegativeInteger">
				References to XSL sources must be positive line numbers.
			</sch:assert>
		</sch:rule>
		<!-- stylesheet -->
		<sch:rule context="*[@reftype eq 'stylesheet'] | xd:ref[@type = 'stylesheet']">
			<sch:let name="sheet" value="(@ref,@name)[1]"/>
			<sch:let name="file" value="(@refsheet,@sheet)[1]"/>
			<sch:assert test="$sheet eq '.' or $sheet castable as xs:IDREF">
				Stylesheet references must be an IDREF, or the special
				value "." to refer to the current stylesheet.
			</sch:assert>
			<sch:assert test="
				not(self::xd:ref) or @name eq '.' or exists(@sheet) or
				exists(//xsl:stylesheet[@id = current()/@name])
			">
				References to external stylesheets using xd:ref must specify
				where the stylesheet is defined using @sheet.
			</sch:assert>
			<sch:assert test="
				self::xd:ref or @ref eq '.' or exists(@refsheet) or
				exists(//xsl:stylesheet[@id = current()/@ref])
			">
				References to external stylesheets using @ref must specify
				where the stylesheet is defined using @refsheet.
			</sch:assert>
		</sch:rule>
	</sch:pattern>

	<sch:pattern abstract="true" id="redundant-backref">
		<sch:rule context="xd:resource[@uri]/$ref[@reftype eq $type]">
			<sch:let name="thisURI" value="parent::xd:resource/@uri"/>
			<sch:let name="thisRoot" value="root()"/>
			<sch:let name="thisHash" value="substring-after(@refsheet, '#')"/>
			<sch:let name="sheet" value="
				if (exists(@refsheet)) then
					if (resolve-uri(@refsheet, base-uri()) eq document-uri()) then
						if ($thisHash) then (//xsl:*[@id = $thisHash])[1]
						else ancestor::xsl:*[last()]
					else if (doc-available(@refsheet)) then
						if ($thisHash) then
							(doc(@refsheet)/descendant-or-self::xsl:*[@id = $thisHash])[1]
						else if (doc(@refsheet)/root() is root()) then
							ancestor::xsl:*[last()]
						else
							doc(@refsheet)
					else
						()
				else
					ancestor::xsl:*[last()]
			"/>
			<sch:report test="empty($sheet) or exists(
				$sheet/descendant-or-self::xsl:*
					[local-name(.) eq $type]
					$filter
					/preceding-sibling::*[1][self::xd:doc]
						/$backref
							[@reftype eq 'resource']
							[@ref eq $thisURI]
							[
								(empty(@refsheet) and root() is $thisRoot)
								or
								(doc(resolve-uri(@refsheet, base-uri())) is $thisRoot)
							]
			)">
				<sch:name/> should not reproduce information already evident
				from a <sch:value-of select="$type"/>'s $backref documentation.
			</sch:report>
		</sch:rule>
	</sch:pattern>
	
</grammar>
